# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
iatest=$(expr index "$-" i)
# If not running interactively, don't do anything
#[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
#if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
#fi

# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
#    ;;
#*)
#    ;;
#esac

#if [ "$TERM" = "dumb" ]; then
#    alias ls="ls -F"
#    alias ll='ls -alF'
#    alias la='ls -A'
#    alias l='ls -CF'
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h $(promptpath)\$ '
#fi

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Set display for vino-server (vnc)
export DISPLAY=:0.0

run_scripts()
{
    for script in $1/*; do
        [ -x "$script" ] || continue
        . $script
    done
}

run_scripts $HOME/.bashrc.d

# Ignore case on auto-completion
# Note: bind used instead of sticking these in .inputrc
if [[ $iatest > 0 ]]; then bind "set completion-ignore-case on"; fi
# Show auto-completion list automatically, without double tab
if [[ $iatest > 0 ]]; then bind "set show-all-if-ambiguous On"; fi
if [[ $iatest > 0 ]]; then bind "set completion-map-case on"; fi

# To have colors for ls and all grep commands such as grep, egrep and zgrep
export CLICOLOR=1
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=035:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'

# Color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

###### Aliases #####
alias ls='ls -lbh --color=auto'
alias sl='ls -lbh --color=auto'
alias rm='rm -v'
alias mv='mv -v'
alias cp='cp -vp'
alias dfh='df -h | grep -v "docker\|udev\|tmpfs"'
alias duh='du -h'
alias grep='grep --color'
alias mysql='mysql -uroot -p -h 127.0.0.1'
alias sourcereload='source ~/.bashrc'

alias bins='cd /usr/local/sbin/'
alias logs='cd /var/log/'
alias listening='netstat -lntu4'

alias install='apt install -y'
alias remove='apt remove -y'
alias autoremove='apt autoremove -y'
alias update='apt update'
alias upgrade='apt upgrade'
alias purgepackages='dpkg --list |grep "^rc" | cut -d " " -f 3 | xargs dpkg --purge'

alias whatsmyip='wget -qO- icanhazip.com'

######################################################
# Functions
######################################################
# Display path with trailing /
function realpath()
{
    f=$@

    if [ -d "$f" ]; then
        base=""
        dir="$f"
    else
        base="/$(basename "$f")"
        dir=$(dirname "$f")
    fi

    dir=$(cd "$dir" && /bin/pwd)

    echo "$dir$base"
}

######################################################
# Set the command prompt
######################################################

function __setprompt
{
   local LAST_COMMAND=$? # Must come first!

   # Define colors
   local LIGHTGREY="\033[0;37m"
   local WHITE="\033[1;37m"
   local BLACK="\033[0;30m"
   local DARKGRAY="\033[1;30m"
   local RED="\033[0;31m"
   local LIGHTRED="\033[1;31m"
   local GREEN="\033[0;32m"
   local LIGHTGREEN="\033[1;32m"
   local BROWN="\033[0;33m"
   local YELLOW="\033[1;33m"
   local BLUE="\033[0;34m"
   local LIGHTBLUE="\033[1;34m"
   local MAGENTA="\033[0;35m"
   local LIGHTMAGENTA="\033[1;35m"
   local CYAN="\033[0;36m"
   local LIGHTCYAN="\033[1;36m"
   local NOCOLOR="\033[0m"

   # Show error exit code if there is one
   if [[ $LAST_COMMAND != 0 ]]; then
      PS1="\[${DARKGRAY}\](\[${RED}\]ERROR\[${DARKGRAY}\])-(\[${RED}\]Exit Code \[${LIGHTRED}\]${LAST_COMMAND}\[${DARKGRAY}\])-(\[${RED}\]"
      if [[ $LAST_COMMAND == 1 ]]; then
         PS1+="General error"
      elif [ $LAST_COMMAND == 2 ]; then
         PS1+="Missing keyword, command, or permission problem"
      elif [ $LAST_COMMAND == 126 ]; then
         PS1+="Permission problem or command is not an executable"
      elif [ $LAST_COMMAND == 127 ]; then
         PS1+="Command not found"
      elif [ $LAST_COMMAND == 128 ]; then
         PS1+="Invalid argument to exit"
      elif [ $LAST_COMMAND == 129 ]; then
         PS1+="Fatal error signal 1"
      elif [ $LAST_COMMAND == 130 ]; then
         PS1+="Script terminated by Control-C"
      elif [ $LAST_COMMAND == 131 ]; then
         PS1+="Fatal error signal 3"
      elif [ $LAST_COMMAND == 132 ]; then
         PS1+="Fatal error signal 4"
      elif [ $LAST_COMMAND == 133 ]; then
         PS1+="Fatal error signal 5"
      elif [ $LAST_COMMAND == 134 ]; then
         PS1+="Fatal error signal 6"
      elif [ $LAST_COMMAND == 135 ]; then
         PS1+="Fatal error signal 7"
      elif [ $LAST_COMMAND == 136 ]; then
         PS1+="Fatal error signal 8"
      elif [ $LAST_COMMAND == 137 ]; then
         PS1+="Fatal error signal 9"
      elif [ $LAST_COMMAND -gt 255 ]; then
         PS1+="Exit status out of range"
      else
         PS1+="Unknown error code"
      fi
      PS1+="\[${DARKGRAY}\])\[${NOCOLOR}\]\n"
   else
      PS1=""
   fi

   # Green prompt is user, red prompt if red
   if [[ $EUID -ne 0 ]]; then
      PS1+="\[${LIGHTGREEN}\]\u@\h"
   else
      PS1+="\[${LIGHTRED}\]\u@\h"
   fi

   # Current directory
   PS1+="\[${LIGHTGREY}\]:\[${LIGHTBLUE}\]\w"

   # Prompt end
   if [[ $EUID -ne 0 ]]; then
      PS1+="\[${GREEN}\]>\[${NOCOLOR}\] " # Normal user
   else
      PS1+="\[${RED}\]>\[${NOCOLOR}\] " # Root user
   fi

}
__setprompt
PROMPT_COMMAND='echo -ne "\e]0;$USER@${HOSTNAME}: $(pwd -P)\a"'
